---
layout: base
ogImage: /covid/og_image.png
seo:
  title: Check your nearest Vaccination Center and  Slots Availability
description: Search for Vaccination center and Slots Availability. Get Vaccinated and Help India in making Covid Free. Stay Safe. Stay Healthy.
sitemap:
  changefreq: weekly
  priority: 0.8
---

<div>
  <div
    class="container mx-auto py-8"
    x-data="searchFormController()"
    x-init="handleInit()"
  >
    <div class="px-6">
      <h1 class="text-lg font-medium">
        <a
          href="{{
            meta.publicUrl
          }}/?utm_source=direct&utm_medium=site&utm_campaign=covid-vaccination"
          class="inline-flex items-center space-x-3 text-lg"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 16 16"
            class="w-10 h-10"
            fill="currentColor"
          >
            <path
              d="M8 16a8 8 0 10-4.465-1.361c.41.276 0-.846.715-2.639.534-1.34 1.81-4.466 1.825-5.205.01-.534-.193-.994-.4-1.466-.046-.101-.09-.204-.134-.307-.391.768-1.764 1.929-2.69 1.743-1.285-.256-.419-1.777.116-2.359l.18-.201c.498-.563 1.191-1.347 1.836-1.076.312.13 1.09.701 1.707 1.19 0 0-.018-.047-.028-.079-.282-.87-.67-1.896 1.14-2.047.46-.04 2.776-.023 2.275.854-.202.352-1.139.45-1.863.526-.305.032-.573.06-.732.101.076.42.121.93.128 1.396 1.074.123 1.755.032 2.557-.075.399-.053.827-.11 1.348-.147C12.035 4.81 12.75 4.75 13 5c.165.165.204.575.145.934-.247 1.491-1.68 2.794-2.812 3.823-.191.174-.374.34-.54.498-1.642 1.55-2.523 3.144-2.434 5.127.01.189-.011.607.225.607.138.007.276.011.416.011z"
            />
          </svg>
          <span>
            <span class="tracking-widest font-medium inline-block mr-2"
              >Sembark</span
            >
            <span class="text-sm inline-block">Travel Management Software</span>
          </span>
        </a>
      </h1>
      <div class="sm:flex justify-between mb-4 mt-4 items-center">
        <div class="mb-2 md:mb-0">
          <h2 class="text-xl font-medium">Search for Vaccination Slots</h2>
        </div>
        <div class="flex space-x-4 items-center text-xs text-indigo-100">
          <a href="#faq">FAQs</a>
          <template
            x-if="notificationsSupportedByBrowser && totalSubscriptionCount > 0"
          >
            <button
              @click="handleUnsubscribeFromAll"
              type="button"
              class="inline-block"
            >
              Unsubscribe Notifications
            </button>
          </template>
        </div>
      </div>
    </div>
    <div class="text-black bg-white p-6 rounded-lg">
      <div class="md:flex">
        <div class="md:w-64 mb-8">
          <form action="#" method="post" @submit.prevent="handleSubmit">
            <div
              class="flex flex-wrap space-x-2 md:block md:space-x-0 justify-between"
            >
              <section class="mb-4">
                <div class="text-gray-600 text-sm">Search by</div>
                <section class="inline-flex border-2 rounded divide-x-2">
                  <label class="block px-2 py-2 cursor-pointer">
                    <input type="radio" value="pincode" x-model="searchUsing" />
                    Pincode
                  </label>
                  <label class="block px-2 py-2 cursor-pointer">
                    <input
                      type="radio"
                      value="district"
                      x-model="searchUsing"
                    />
                    District
                  </label>
                </section>
              </section>
              <section class="mb-4">
                <div class="text-gray-600 text-sm">Age</div>
                <section class="inline-flex border-2 rounded divide-x-2">
                  <label class="block px-2 py-2 cursor-pointer">
                    <input type="radio" value="18" x-model="minAgeLimit" />
                    18-45
                  </label>
                  <label class="block px-2 py-2 cursor-pointer">
                    <input type="radio" value="45" x-model="minAgeLimit" />
                    45+
                  </label>
                </section>
              </section>
            </div>
            <div class="flex items-end md:block space-x-4 md:space-x-0">
              <div class="flex-1">
                <template x-if="searchUsing == 'district'">
                  <div>
                    <label for="district_id">Select District</label>
                    <select
                      x-model="query.district_id"
                      id="district_id"
                      name="district_id"
                      class="border-2 rounded w-full p-3"
                      required
                      placeholder="Jaipur"
                    >
                      <option value="">Select...</option>
                      {% for district in covid.districts %}
                      <option value="{{ district.district_id }}">
                        {{ district.district_name }}
                      </option>
                      {% endfor %}
                    </select>
                  </div>
                </template>
                <template x-if="searchUsing == 'pincode'">
                  <div>
                    <label for="pincode">Enter Pincode</label>
                    <input
                      id="pincode"
                      type="number"
                      name="pincode"
                      class="border-2 rounded w-full p-3"
                      x-model="query.pincode"
                      required
                      placeholder="302020"
                      min="100000"
                      max="999999"
                    />
                  </div>
                </template>
              </div>
              <div>
                <button
                  :disabled="isSubmitting"
                  type="submit"
                  class="hidden md:inline-block px-4 py-3 bg-indigo-700 text-white rounded mt-8"
                >
                  <template x-if="isSubmitting">
                    <span>Searching...</span>
                  </template>
                  <template x-if="!isSubmitting">
                    <span>Search Available Slots</span>
                  </template>
                </button>
                <button
                  :disabled="isSubmitting"
                  type="submit"
                  class="inline-block md:hidden p-3 bg-indigo-700 border-2 border-indigo-700 text-white rounded"
                >
                  <template x-if="isSubmitting">
                    <span>
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="h-6 w-6 animate-spin"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                        />
                      </svg>
                    </span>
                  </template>
                  <template x-if="!isSubmitting">
                    <span>
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="h-6 w-6"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                        />
                      </svg>
                    </span>
                  </template>
                </button>
              </div>
            </div>
          </form>
        </div>
        <div class="flex-1 min-w-0 md:ml-4 md:pl-4 md:border-l">
          <div class="lg:flex lg:space-y-0 lg:space-x-8">
            <div class="flex-1 px-4 -mx-4">
              <template x-if="error">
                <div
                  class="text-red-900 bg-red-100 border border-red-300 p-4 mb-8 rounded-lg"
                >
                  <div x-text="error.message"></div>
                </div>
              </template>
              <template x-if="isSubmitting">
                <div class="mb-8">
                  <div class="text-center py-8 text-gray-800">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="h-6 w-6 animate-spin mx-auto"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                      />
                    </svg>
                    <div class="mt-4">Searching for available slots</div>
                  </div>
                </div>
              </template>
              <template
                x-if="!sessions.length && !isSubmitting && hasAppliedAnyFilters"
              >
                <div class="mb-8 mt-8">
                  <div class="text-xl mb-1">No Slots Available</div>
                  <p class="text-sm text-gray-500">
                    There are no slots available in this area at this moment.
                    Please try again later.
                  </p>
                  <template x-if="hasSubscribed">
                    <p class="text-sm mt-2">
                      You will get notified when slot(s) are available.
                    </p>
                  </template>
                  <template
                    x-if="!hasSubscribed && notificationsSupportedByBrowser"
                  >
                    <div>
                      <template x-if="!hasBlockedNotifications">
                        <p class="text-sm mt-2">
                          Please select bellow checkbox to get notified on
                          updates.
                        </p>
                      </template>
                      <div class="mb-8 mt-8">
                        <form>
                          <label
                            class="p-4 border-2 border-dashed border-indigo-100 rounded-lg flex space-x-2 w-full bg-indigo-50 cursor-pointer"
                          >
                            <div>
                              <input
                                class="block mt-1"
                                type="checkbox"
                                x-bind:checked="hasSubscribed"
                                @change="handleSubscriptionChange"
                              />
                            </div>
                            <div>
                              <template x-if="hasBlockedNotifications">
                                <div>
                                  <div>Notifications have been blocked.</div>
                                  <div class="text-xs text-gray-600 mt-1">
                                    Please grant permissions to show
                                    notifications from the browser settings to
                                    receive updates regarding slots
                                    availability.
                                  </div>
                                </div>
                              </template>
                              <template x-if="!hasBlockedNotifications">
                                <div>
                                  <div>
                                    Get notification on updates in this area
                                  </div>
                                  <div class="text-xs text-gray-600 mt-1">
                                    Please select the checkbox to get
                                    notifications for slots availability in this
                                    area. You will receive notifications in your
                                    browser. No phone or email required.
                                  </div>
                                </div>
                              </template>
                            </div>
                          </label>
                        </form>
                      </div>
                    </div>
                  </template>
                </div>
              </template>
              <template
                x-if="!sessions.length && !isSubmitting && !hasAppliedAnyFilters"
              >
                <div
                  class="mb-8 text-gray-600 text-center py-8 px-2 border-2 border-dashed rounded-lg"
                >
                  <div>Available slots will appear here.</div>
                  <div class="text-xs">
                    Search for slots using pincode or district
                  </div>
                </div>
              </template>
              <template x-if="sessions.length && !isSubmitting">
                <div class="mb-8">
                  <div class="block">
                    <ol class="space-y-4 max-h-screen overflow-auto relative">
                      <li
                        class="sticky top-0 w-full bg-white py-2 px-4 text-sm flex justify-between text-gray-600 items-center font-medium -mb-2"
                      >
                        <div>Center</div>
                        <div class="text-right">Availability</div>
                      </li>
                      <template
                        x-for="(session, index, collection) in sessions"
                        :key="index"
                      >
                        <li class="bg-coolGray-50 rounded-lg p-4">
                          <div class="flex justify-between space-x-4">
                            <div>
                              <div class="font-medium mb-1">
                                <span x-text="session.name"></span>
                              </div>
                              <div class="text-sm">
                                <span x-text="session.block_name"></span> -
                                <span x-text="session.pincode"></span>
                              </div>
                            </div>
                            <div class="text-right">
                              <div
                                x-text="session.available_capacity"
                                class="text-xl font-medium"
                              ></div>
                              <time
                                x-text="session.pretty_date"
                                class="text-sm whitespace-pre"
                                x-bind:datetime="session.parsed_date.toISOString()"
                              ></time>
                            </div>
                          </div>
                          <div class="text-gray-600 inline-flex -ml-4">
                            <div
                              x-text="session.vaccine"
                              class="font-medium text-xs ml-4"
                            ></div>
                            <div
                              x-text="session.fee_type"
                              class="font-medium text-xs ml-4"
                            ></div>
                          </div>
                        </li>
                      </template>
                    </ol>
                  </div>
                </div>
              </template>
            </div>
            <div class="lg:w-1/2">
              <template
                x-if="notificationsSupportedByBrowser && !isSubmitting && hasAppliedAnyFilters && (hasSubscribed || sessions.length)"
              >
                <div class="mb-8">
                  <form>
                    <label
                      class="p-4 border-2 border-dashed border-indigo-100 rounded-lg flex space-x-2 w-full bg-indigo-50 cursor-pointer"
                    >
                      <div>
                        <input
                          class="block mt-1"
                          type="checkbox"
                          x-bind:checked="hasSubscribed"
                          @change="handleSubscriptionChange"
                        />
                      </div>
                      <div>
                        <template x-if="hasBlockedNotifications">
                          <div>
                            <div>Notifications have been blocked.</div>
                            <div class="text-xs text-gray-600 mt-1">
                              Please grant permissions to show notifications
                              from the browser settings to receive updates
                              regarding slots availability.
                            </div>
                          </div>
                        </template>
                        <template
                          x-if="!hasSubscribed && !hasBlockedNotifications"
                        >
                          <div>
                            <div>Get notification on updates in this area</div>
                            <div class="text-xs text-gray-600 mt-1">
                              Please select the checkbox to get notifications
                              for slots availability in this area. You will
                              receive notifications in your browser. No phone or
                              email required.
                            </div>
                          </div>
                        </template>
                        <template
                          x-if="hasSubscribed && !hasBlockedNotifications"
                        >
                          <div>
                            <div>
                              You have subscribed for slots availability
                              updates.
                            </div>
                            <div class="text-xs text-gray-600 mt-1">
                              You will receive browser notification for slots
                              availability for this area.
                            </div>
                            <div class="text-xs mt-1">
                              To unsubscribe, please deselect the checkbox.
                            </div>
                          </div>
                        </template>
                      </div>
                    </label>
                  </form>
                </div>
              </template>
              <div class="bg-gray-50 rounded-lg p-6 shadow-inner">
                <h2 class="text-lg font-medium mb-4">
                  How to Book an Appointment
                </h2>
                <ol class="list-decimal ml-5 space-y-2">
                  <li>
                    Search for available slots in your area using pincode or
                    your district.
                  </li>
                  <li>See the available slots in the search results.</li>
                  <li>
                    If slots are available, visit
                    <a
                      href="https://selfregistration.cowin.gov.in/"
                      rel="noopener noreferrer"
                      target="_blank"
                      class="text-indigo-600 underline"
                      >https://selfregistration.cowin.gov.in/</a
                    >
                    to book an appointment.
                  </li>
                  <li>
                    If no slots are available, click on "Notify Me" button to
                    get a notification when slot(s) is available for your query.
                  </li>
                </ol>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <section
      class="mt-16 px-4 md:px-8 py-8 bg-coolGray-50 rounded-lg text-gray-900 leading-loose"
    >
      <h4 class="text-2xl mb-8 font-medium">Frequently asked questions</h4>
      <ol class="space-y-8">
        <li>
          <div class="font-medium mb-2">
            What is Sembark - Travel Management Software ?
          </div>
          <div class="text-sm text-gray-600">
            Sembark is technology company, focusing on Travel Management
            softwares.
            <b class="font-medium text-gray-800"
              >Sembark provides complete solutions including sales, follow-ups,
              bookings, reservations and accounting for travel business (travel
              operations, DMCs etc).</b
            >
            <br />
            <a
              href="{{
                meta.publicUrl
              }}/?utm_source=direct&utm_medium=site&utm_campaign=covid-vaccination&utm_content=from_faq"
              class="underline inline-block mt-1"
            >
              Learn more about Sembark
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-4 w-4 inline"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M14 5l7 7m0 0l-7 7m7-7H3"
                />
              </svg>
            </a>
          </div>
        </li>
        <li>
          <div class="font-medium mb-2">
            I can not see the "Get Notifications" button on my device
          </div>
          <div class="text-sm text-gray-600">
            It means that your browser doesn't support notifications feature.
            <b class="font-medium text-gray-800"
              >We recommend using Google Chorme or Firefox to enable
              notifications.</b
            >
          </div>
        </li>
        <li>
          <div class="font-medium mb-2">
            I blocked the notifications by mistake. How can I unblock these?
          </div>
          <div class="text-sm text-gray-600">
            The procedure to unblock notifications depends on your browser
            (Chrome/Firefox). Here are some common way to unblock notifications:
            <ul class="list-disc ml-5 space-y-2 mt-2">
              <li>
                If you are using Google Chrome or Firefox (or similar Chromium
                based browser) on an Android device, click on the lock icon
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="h-4 w-4 inline-block"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                >
                  <path
                    fill-rule="evenodd"
                    d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z"
                    clip-rule="evenodd"
                  />
                </svg>
                at the top menu bar (in the url). You will see a "Permissions"
                option. Click on it. You will see the "Notifications blocked"
                option. Click on it and allow "Show notifications".
              </li>
              <li>
                If you are using Google Chrome or Firefox (or similar Chromium
                based browser) on a dektop (PC, Laptop), you will find some
                icons in the top url/search bar. Click on these icons to see
                which one has an option to "Permissions". Once you find it,
                click on "Allow" to unblock the notifications permission.
              </li>
            </ul>
          </div>
        </li>
        <li>
          <div class="font-medium mb-2">
            Can I subscribe for availability check in different areas
            (pincode/district) ?
          </div>
          <div class="text-sm text-gray-600">
            <b>Yes.</b> Simply search for different areas (pincode/district) and
            click on "Get Notifications" for that region. You will be notified
            when slots are available for each area.
          </div>
        </li>
        <li>
          <div class="font-medium mb-2">
            When will I get notified regarding slots availability?
          </div>
          <div class="text-sm text-gray-600">
            Slots availability is checked in background on a regular basis. As
            soon as there are slots available for your searched region, you will
            get a notification.
          </div>
        </li>
        <li>
          <div class="font-medium mb-2">
            I am not getting notifications regarding slots availability
          </div>
          <div class="text-sm text-gray-600">
            You should get notifications when you have subscribed and there are
            free slots available for your region. If you know there are some
            free slots available, please follow these step to troubleshoot the
            problem.
            <ol class="list-decimal ml-5 mt-2 space-y-2">
              <li>
                Please check the system settings for notifications on your
                device to see if the your browser (Google Chrome, Firefox etc.)
                is allowed to show the notifications.
              </li>
              <li>
                Please check that this website is not block from showing the
                notifications.
              </li>
            </ol>
          </div>
        </li>
        <li>
          <div class="font-medium mb-2">
            How to unsubscribe from Notifications ?
          </div>
          <div class="text-sm text-gray-600">
            If you have subscribed to any area updates, you will see a button to
            "Unsubscribe from all Notifications" on the top of the page. You can
            click on it to unsubscribe from all updates. You can also
            unsubscribe from a specific search by deselecting the "Get
            Notifications" checkbox on your search results.
          </div>
        </li>
      </ol>
    </section>
    <section class="mt-16 px-4 md:px-8 py-8 bg-indigo-800 rounded-lg">
      <h4 class="text-xl mb-4">Disclaimer</h4>
      <p>
        The slots availability data is a property of
        <a
          href="https://www.india.gov.in/"
          rel="noopener noreferrer"
          class="underline"
          target="_blank"
          >Ministry of Health and Family Welfare, India</a
        >
        and is maintained by
        <a
          href="https://www.cowin.gov.in/home"
          target="_blank"
          class="underline"
          rel="noopener noreferrer"
          >CoWIN</a
        >
        with full ownership rights. This portal is created merely for helping
        the India get vaccinated. Hence, we don't hold any liabilities and
        responsibilities of data discrepancies or any other issues regarding
        slots availability and vaccination.
      </p>
    </section>
  </div>
</div>
<script>
  window.searchFormController = function searchFormController() {
    const storage = SubscriptionsStorage();
    const notificationsSupportedByBrowser =
      "serviceWorker" in navigator && "Notification" in window;
    const permissionGranted =
      notificationsSupportedByBrowser && Notification.permission === "granted";
    const permissionBlocked =
      notificationsSupportedByBrowser && Notification.permission === "denied";
    const locationQuery = getQueryFromLocationSearch();
    let activeServiceWorkerRegistration = undefined;
    return {
      query: {
        pincode: locationQuery.pincode || "",
        district_id: locationQuery.district_id || "",
      },
      isSubmitting: false,
      hasAppliedAnyFilters: Boolean(
        locationQuery.pincode || locationQuery.district_id
      ),
      searchUsing: locationQuery.district_id ? "district" : "pincode",
      minAgeLimit: locationQuery.minAgeLimit || "18",
      sessions: [],
      hasBlockedNotifications: permissionBlocked,
      error: null,
      handleSubmit() {
        const query = {};
        const m = this;
        if (m.searchUsing === "pincode") {
          query.pincode = m.query.pincode;
        } else {
          query.district_id = m.query.district_id;
        }
        if (!query.pincode && !query.district_id) return;
        gtag("event", "covid_vaccination_search", {
          using: m.searchUsing,
          pincode: query.pincode,
          district_id: query.district_id,
          min_age_limit: m.minAgeLimit,
        });
        m.updateHasSubscribedIfNecessary();
        m.isSubmitting = true;
        m.error = null;
        (m.hasAppliedAnyFilters = Boolean(query.pincode || query.district_id)),
          (m.query = query);
        updateLocationSearchWithNewQuery(
          Object.assign({}, query, { minAgeLimit: m.minAgeLimit })
        );
        fetchSessions(Object.assign({}, query, { minAgeLimit: m.minAgeLimit }))
          .then((sessions) => {
            m.sessions = sessions;
            m.isSubmitting = false;
          })
          .catch(function (e) {
            m.error = e;
            m.isSubmitting = false;
            console.error(e);
          });
      },
      notificationsSupportedByBrowser,
      hasSubscribed: false,
      totalSubscriptionCount: 0,
      handleSubscriptionChange(e) {
        this.hasSubscribed ? this.unsubscribe() : this.subscribe();
      },
      getQueryString() {
        if (this.searchUsing === "pincode") {
          return JSON.stringify({
            pincode: this.query.pincode,
            minAgeLimit: this.minAgeLimit,
          });
        }
        return JSON.stringify({
          district_id: this.query.district_id,
          minAgeLimit: this.minAgeLimit,
        });
      },
      handleInit() {
        const m = this;
        if (locationQuery.viaNotification) {
          gtag("event", "covid_notification_viewed");
        }
        if (
          locationQuery &&
          (locationQuery.pincode || locationQuery.district_id)
        ) {
          m.handleSubmit();
        } else {
          m.updateHasSubscribedIfNecessary();
        }
        if (m.hasBlockedNotifications) {
          m.handleUnsubscribeFromAll();
        }
        // get the service worker
        getServiceWorkerRegistration()
          .then(function (registration) {
            activeServiceWorkerRegistration = registration;
            // make sure we are on latest every update
            registration.update();
          })
          .catch(function (error) {
            // service worker not round
            setTimeout(function () {
              m.handleUnsubscribeFromAll();
            }, 1000);
          });
      },
      updateHasSubscribedIfNecessary() {
        const m = this;
        const queryString = this.getQueryString();
        storage.has(queryString, function (exists) {
          m.hasSubscribed = permissionGranted && exists;
        });
        storage.count(function (count) {
          m.totalSubscriptionCount = count;
        });
      },
      unsubscribe() {
        const queryString = this.getQueryString();
        storage.remove(queryString);
        const m = this;
        m.hasSubscribed = false;
        m.totalSubscriptionCount -= 1;
        gtag("event", "covid_notification_unsubscribed");
        if (!m.totalSubscriptionCount && activeServiceWorkerRegistration) {
          activeServiceWorkerRegistration.unregister();
        }
      },
      subscribe() {
        const queryString = this.getQueryString();
        const m = this;
        window.Notification.requestPermission().then(function (permission) {
          if (permission !== "granted") {
            gtag("event", "covid_notification_permission_denied");
            alert("Please grant permission to get notified regarding updates.");
            setTimeout(function () {
              m.hasSubscribed = false;
            }, 1000);
            m.handleUnsubscribeFromAll();
            return;
          }
          gtag("event", "covid_notification_subscribed");
          storage.add(queryString);
          m.hasSubscribed = true;
          m.totalSubscriptionCount += 1;
          if (!activeServiceWorkerRegistration) {
            // now we will register the service worker
            registerNotificationServiceWorker().then(function (registration) {
              activeServiceWorkerRegistration = registration;
              setTimeout(() => {
                activeServiceWorkerRegistration.showNotification(
                  "Subscribed to slots updates",
                  {
                    body:
                      "You will receive notification(s) for slots availability in this area.",
                    icon:
                      "https://assets.sembark.com/images/logos/logo_96x96.png",
                  }
                );
                // get the tracking id
                const cookie = document.cookie;
                if (cookie) {
                  const ga = document.cookie
                    .split(";")
                    .map((s) => s.trim().split("="))
                    .filter((item) => item[0] == "_ga")[0];
                  if (ga) {
                    const cid = ga[1];
                    // send it to service worker
                    activeServiceWorkerRegistration.active.postMessage({
                      type: "gcid",
                      value: cid,
                    });
                  }
                }
              }, 1000);
            });
          }
        });
      },
      handleUnsubscribeFromAll() {
        const m = this;
        if (m.hasSubscribed) {
          gtag("event", "covid_notification_unsubscribed_all");
        }
        m.hasSubscribed = false;
        m.totalSubscriptionCount = 0;
        if (activeServiceWorkerRegistration) {
          activeServiceWorkerRegistration.unregister();
        }
        storage.removeAll();
      },
    };
  };
  function formatDate(date) {
    var d = new Date(date),
      month = "" + (d.getMonth() + 1),
      day = "" + d.getDate(),
      year = d.getFullYear();
    if (month.length < 2) month = "0" + month;
    if (day.length < 2) day = "0" + day;
    return [day, month, year].join("-");
  }

  var MONTHS = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec",
  ];

  function prettyFormatDate(date) {
    var d = new Date(date),
      month = MONTHS[d.getMonth()],
      day = "" + d.getDate();
    // year = d.getFullYear()
    return day + " " + month;
  }

  function parseDate(date) {
    try {
      var [day, month, year] = date.split("-").map((d) => parseInt(d));
      var d = new Date();
      d.setFullYear(year);
      d.setMonth(month - 1);
      d.setDate(day);
      d.setMinutes(0);
      d.setSeconds(0);
      d.setMinutes(0);
      return d;
    } catch (e) {
      console.error(e);
      return new Date();
    }
  }

  function fetchSessions(query) {
    const today = new Date();
    return Promise.all(
      [today].map(function fetchSlotsToDate(date) {
        let url;
        if (query.pincode) {
          url =
            "https://cdn-api.co-vin.in/api/v2/appointment/sessions/public/calendarByPin" +
            "?pincode=" +
            encodeURIComponent(query.pincode);
        } else {
          url =
            "https://cdn-api.co-vin.in/api/v2/appointment/sessions/public/calendarByDistrict" +
            "?district_id=" +
            encodeURIComponent(query.district_id);
        }
        return fetch(url + "&date=" + formatDate(new Date()), {
          method: "GET",
          headers: { "Content-Type": "application/json" },
          referrer: "",
          referrerPolicy: "same-origin",
          mode: "cors",
          keepalive: true,
        })
          .then(function (resp) {
            return resp.json();
          })
          .then(function (data) {
            if (data.error) {
              throw new Error(data.error);
            }
            const centers = data.centers;
            const sessions = centers.reduce(function (sessions, center) {
              // get sessions from center and push it to sessions carry
              return sessions.concat(
                center.sessions.map(function (session) {
                  // add center details to the session
                  session = Object.assign({}, session, center);
                  delete session["sessions"];
                  session.parsed_date = parseDate(session.date);
                  session.pretty_date = prettyFormatDate(session.parsed_date);
                  return session;
                })
              );
            }, []);
            return sessions;
          });
      })
    )
      .then(function (arrayOfArrayOfSessions) {
        return arrayOfArrayOfSessions.reduce(function flattenSessions(
          sessions,
          arrayOfSessions
        ) {
          return sessions.concat(
            arrayOfSessions.sort((a, b) =>
              a.parsed_date > b.parsed_date
                ? 1
                : a.date === b.date
                ? a.name.toLowerCase() > b.name.toLowerCase()
                  ? 1
                  : -1
                : -1
            )
          );
        },
        []);
      })
      .then(function (sessions) {
        return sessions.filter(function hasAvailableSlots(session) {
          if (parseInt(session.available_capacity) <= 0) {
            return false;
          }
          const minAgeLimit = parseInt(query.minAgeLimit);
          if (Number(session.min_age_limit) > minAgeLimit) {
            return false;
          }
          return true;
        });
      });
  }

  function getServiceWorkerRegistration() {
    return new Promise(function (resolve, reject) {
      if ("serviceWorker" in navigator) {
        navigator.serviceWorker
          .getRegistrations()
          .then(function (registrations) {
            for (let registration of registrations) {
              if (
                registration.active &&
                registration.active.state === "activated"
              ) {
                if (
                  registration.active.scriptURL.indexOf("covid/service.js") !==
                    -1 &&
                  registration.scope.indexOf("covid/notification-scope") !== -1
                ) {
                  return resolve(registration);
                }
              }
            }
            reject("Not registered");
          });
      }
    });
  }

  function registerNotificationServiceWorker() {
    return navigator.serviceWorker.register("/assets/covid/service.js", {
      scope: "/assets/covid/notification-scope",
    });
  }

  function getQueryFromLocationSearch() {
    const queryString = window.location.search;
    var query = {};
    var pairs = (queryString[0] === "?"
      ? queryString.substr(1)
      : queryString
    ).split("&");
    for (var i = 0; i < pairs.length; i++) {
      var pair = pairs[i].split("=");
      query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || "");
    }
    return query;
  }

  function updateLocationSearchWithNewQuery(query) {
    if (window.history && history.pushState) {
      const search = new URLSearchParams();
      Object.keys(query).map(function (key) {
        search.set(key, query[key]);
      });
      const newurl =
        window.location.origin +
        window.location.pathname +
        "?" +
        search.toString();
      window.history.pushState({ path: newurl }, "", newurl);
    }
  }

  function SubscriptionsStorage() {
    let db;
    const cbs = [];
    const request = window.indexedDB.open("covid", 1);
    request.onsuccess = function () {
      db = request.result;
      if (cbs.length) {
        cbs.map((cb) => cb());
      }
    };
    // create/upgrade the database without version checks
    request.onupgradeneeded = function () {
      db = request.result;
      if (!db.objectStoreNames.contains("subscriptions")) {
        // if there's no "books" store
        db.createObjectStore("subscriptions", { keyPath: "id" }); // create it
      }
    };
    return {
      count(cb) {
        if (!db) {
          cbs.push(() => this.count(cb));
          return;
        }
        let transaction = db.transaction("subscriptions");
        let subscriptions = transaction.objectStore("subscriptions");
        const request = subscriptions.count();
        request.onsuccess = function () {
          cb(request.result);
        };
      },
      has(subscription, cb) {
        if (!db) {
          cbs.push(() => this.has(subscription, cb));
          return;
        }
        let transaction = db.transaction("subscriptions");
        let subscriptions = transaction.objectStore("subscriptions");
        const request = subscriptions.get(subscription);
        request.onsuccess = function () {
          if (!request.result) {
            cb(false);
            return;
          }
          return cb(true);
        };
      },
      add(subscription) {
        if (!db) {
          cbs.push(() => this.add(subscription));
          return;
        }
        let transaction = db.transaction("subscriptions", "readwrite");
        let subscriptions = transaction.objectStore("subscriptions");
        subscriptions.add({ id: subscription });
      },
      remove(subscription) {
        if (!db) {
          cbs.push(() => this.remove(subscription));
          return;
        }
        let transaction = db.transaction("subscriptions", "readwrite");
        let subscriptions = transaction.objectStore("subscriptions");
        const req = subscriptions.delete(subscription);
      },
      removeAll() {
        if (!db) {
          cbs.push(() => this.removeAll());
          return;
        }
        let transaction = db.transaction("subscriptions", "readwrite");
        let subscriptions = transaction.objectStore("subscriptions");
        const req = subscriptions.clear();
      },
    };
  }
</script>
